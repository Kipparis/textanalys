# -*- coding: utf-8 -*-

import json

import utils as ut
import re

import numpy as np
from scipy import sparse

from collections import Counter

from pprint import pprint

import settings

from utils import Watcher


# for i in range(1072, 1104):
#     print(chr(i))

def parse_feature(feature):
        # –ï—Å–ª–∏ –ø–æ—Å–ª–∞–ª–∏ –ø–æ–ª–Ω—É—é —Ö—É–π–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ—Ç—É => —Ç–∞–º –ø–æ–Ω–∏–º–∞–µ–º —á—Ç–æ —É–±–∏—Ä–∞–µ–º –≤—Å—ë
        output = feature.strip()

        if output == '':
            return None

        # —Ü–∏–∫–ª–∏–º —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø—è—Ç—ã–µ, —Å–æ–∫—Ä–∞—â–∞–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏, –µ—Å–ª–∏ —Ç–æ—á–∫–∞ —Ç–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É
        # –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {n} —Å–æ–∫—Ä–∞—â–∞–µ–º –∫–∞–∫ —Ç–æ—á–∫—É.
        isChanged = True
        while isChanged:
            first_letter = output[0]
            code = ord(first_letter)
            if '{n}{n}' in output:
                output = output.replace('{n}{n}', '{n}')
            elif '!!' in output:
                output = output.replace('!!', '!')
            elif '??' in output:
                output = output.replace('??', '?')
            elif ',,' in output:
                output = output.replace(',,', ',')
            elif '..' in output:
                output = output.replace('..', '.')
            elif '\"\"' in output:
                output = output.replace('\"\"', '\"')
            elif '\'\'' in output:
                output = output.replace('\'\'', '\'')
            else:
                isChanged = False

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∏–µ —Å–ª—É—á–∞–∏ –∫–∞–∫ text.text    text{n}text    text,text    text?!"'tetxt ( –≤—Ä–æ–¥–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≥—É—Ä—è—Ä–∫—É –∏—Å–ø–æ–ª—å–∑—É—è [] –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Å) 
        stupid_symbol = re.compile(r'\S+([.,\-()!?"\']|\{n\})+\S+')

        string_symb = ".,-()!\"?\'"
        symbols = list(string_symb)
        symbols.append('{n}')

        if len(stupid_symbol.findall(output)) != 0:
            for symb in symbols:
                if symb in output:
                    output = output.split(symb)[0] + '||||' + output.split(symb)[-1].strip()
                    print("Split by {} and return {}".format(symb, output))
        else:
            for symb in symbols:
                if symb in output:
                    # –ó–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –∫–æ–Ω—Ü–µ
                    output = output.replace(symb, '').strip()
                    print("Remove and return {}".format(symb))

        first_letter = output[0]
        code = ord(first_letter)

        # –ï—Å–ª–∏ —Ç–∞–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–ª–∏ –∫–∞–∫–∏–µ —Ç–æ –µ–±—É—á–∏–µ –±—É–∫–≤—ã, —Ä–µ–º—É–≤–∞–µ–º

        return output


# spacees = '  blbabalb   blalbalb    '
spacees = input("type your feature: ")
output = parse_feature(spacees)
if output is None:
    print("useless string")
else:
    print("parsing string: '{}'\toutput is: '{}'".format(spacees, parse_feature(spacees)))

# print("A has code {}".format(ord('A')))
# print("Z has code {}".format(ord('Z')))
# print("a has code {}".format(ord('a')))
# print("z has code {}".format(ord('z')))
# print("~ has code {}".format(ord('~')))
# print("œÜ has code {}".format(ord('œÜ')))
# print("—î has code {}".format(ord('—î')))
# print("‚ñê has code {}".format(ord('‚ñê')))
# print("‚†Ñ has code {}".format(ord('‚†Ñ')))
# print("ùê≤ has code {}".format(ord('ùê≤')))
# print("! has code {}".format(ord('!')))
# print("/ has code {}".format(ord('/')))
# print("0 has code {}".format(ord('0')))
# print("9 has code {}".format(ord('9')))

# print("  has code {}".format(ord(' ')))
# print("–Ü has code {}".format(ord('–Ü')))

# print("–ê has code {}".format(ord('0')))
# print("–Ø has code {}".format(ord('9')))

# print("–∞ has code {}".format(ord('0')))
# print("—è has code {}".format(ord('9')))

symb = '„ÇØ'
code = ord(symb)



# if code in range(65, 91) or code in range(97, 123) or code in range(126, 967) or code in range(1108, 9617) or code in range(10244, 119859):
        # print("{} is in range".format(symb))




print("ended")